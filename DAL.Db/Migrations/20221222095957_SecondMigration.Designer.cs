// <auto-generated />
using System;
using DAL.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Db.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221222095957_SecondMigration")]
    partial class SecondMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0-rc.2.22472.11");

            modelBuilder.Entity("Domain.CheckersGame", b =>
                {
                    b.Property<int?>("CheckersGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CheckersOptionsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("GameOverAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("GameWonByPlayer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Player1Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("Player1Side")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Player2Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("Player2Side")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("CheckersGameId");

                    b.HasIndex("CheckersOptionsId");

                    b.ToTable("CheckersGames");
                });

            modelBuilder.Entity("Domain.CheckersOptions", b =>
                {
                    b.Property<int>("CheckersOptionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CaptureBackwardsAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CaptureMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("KingCanFly")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OptionsName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("PieceFilledRowsPerSide")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WhiteStarts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("CheckersOptionsId");

                    b.ToTable("GameOptions");
                });

            modelBuilder.Entity("Domain.GameState", b =>
                {
                    b.Property<int>("GameStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CheckersGameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GameBoard")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GameStateName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("OptionsCheckersOptionsId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WhiteTurn")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameStateId");

                    b.HasIndex("CheckersGameId");

                    b.HasIndex("OptionsCheckersOptionsId");

                    b.ToTable("GameStates");
                });

            modelBuilder.Entity("Domain.CheckersGame", b =>
                {
                    b.HasOne("Domain.CheckersOptions", "Options")
                        .WithMany()
                        .HasForeignKey("CheckersOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.GameState", b =>
                {
                    b.HasOne("Domain.CheckersGame", null)
                        .WithMany("States")
                        .HasForeignKey("CheckersGameId");

                    b.HasOne("Domain.CheckersOptions", "Options")
                        .WithMany()
                        .HasForeignKey("OptionsCheckersOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.CheckersGame", b =>
                {
                    b.Navigation("States");
                });
#pragma warning restore 612, 618
        }
    }
}
